node('master') {
    currentBuild.result="SUCCESS"
     def server = Artifactory.server 'JFrog'
     
    try {
        stage ('Check-Out'){
            slackSend color: '#4171f4', message: 'Deployment started on OpenShift '
             build job: 'Openshift-Instance-Clear'
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '3a22a56c-a9fa-4ec7-885e-88085f535991', url: 'https://smetal1@bitbucket.org/ctsihg/ihg-microservices-demo.git']]])
        }
        stage ('SonarQube'){
            withSonarQubeEnv('SonarQube'){
                sh 'mvn clean package -DskipTests=true sonar:sonar'
            }
        }

        stage ('Artifactory-Push'){
           
            def uploadSpec = """{
                            "files": [
                             {
                                "pattern": "../../../hotel-details-service/target/*.jar",
                                "target": "lsb-release/"
                             },
                             {
                                 "pattern": "../../../inventory-service/target/*.jar",
                                "target": "lsb-release/"
                             },
                             {
                                 "pattern": "../../../price-service/target/*.jar",
                                "target": "lsb-release/"
                             },
                              {
                                 "pattern": "../../../property-search-service/target/*.jar",
                                "target": "lsb-release/"
                             },
                             {
                                 "pattern": "../../../config-server/target/*.jar",
                                "target": "lsb-release/"
                             }
                             
                            ]
                            }"""
            server.upload(uploadSpec)

        }
        stage('Artifactory-Pull'){
            def downloadSpec = """{
            "files": [
                         {
                            "pattern": "lsb-release/config-server-0.0.1-SNAPSHOT.jar",
                            "target": "../../../config-server/target/"
                        },
                        {
                        
                            "pattern": "lsb-release/hotel-details-service-0.0.1.jar",
                            "target": "../../../hotel-details-service/target/"
                        },
                          {
                        
                            "pattern": "lsb-release/inventory-service-0.0.1.jar",
                            "target": "../../../inventory-service/target/"
                        },
                        {
                        
                            "pattern": "lsb-release/price-service-0.0.1.jar",
                            "target": "../../../price-service/target/"
                        },
                         {
                        
                            "pattern": "lsb-release/property-search-service-0.0.1.jar",
                            "target": "../../../property-search-service/target/"
                        }
                    ]
            }"""
            server.download(downloadSpec)
            
        }
        stage('OpenShift-Deployment'){
          
            sh 'chmod +x ./deployment/openshift/openshift-deployment/openshift.sh'
            sh 'chmod +x ./deployment/openshift/openshift-deployment/docker.sh'
            sh './deployment/openshift/openshift-deployment/docker.sh'
            sh './deployment/openshift/openshift-deployment/openshift.sh'
            build job: 'IHG-OpenShift-UI-Deployment'
            sleep 100
            slackSend color: '#42f44e', message: "Deployment Successfull!! Details: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})  <http://dashboard-propertymgmt.app.openshiftcognizant.com/|Dashboard>"
        }
        
         stage('Functional Testing- API') {
             
             
        slackSend color: '#f49242', message: "Post Deployment Testing Started!! Details:'${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) "
        
        build job: 'IHG_Test_Automation_Job', parameters: [string(name: 'MavenCommand', value: 'mvn clean test -PrunTestsForAPIOnOpenShift -DprofileIdEnabled=true')]
         }
    
        
        stage('Early Performance Testing- API'){
            build job: 'Early Performance Testing - API Job' 
    
        }
       
        stage('Smoke Test') {
                    build job: 'IHG_Test_Automation_Job', parameters: [string(name: 'MavenCommand', value: 'mvn clean test -PrunTestsForWebOnOpenShift -DprofileIdEnabled=true -Dcucumber.options="--tags @Smoke')]
        }

  
        stage('Functional Testing(Desktop & Mobile)') {
                   build job: 'IHG_Test_Automation_Job', parameters: [string(name: 'MavenCommand', value: 'mvn clean test -PrunTestsForWebOnOpenShift -DprofileIdEnabled=true -Dcucumber.options="--tags @WebUI"')]
        }
        stage('Early Performance Testing') {
            build job: 'Early Performance Testing - UI Job'
            slackSend color: '#0ccc78', message: "Post Deployment Testing Completed!! Details:'${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) Visit : <http://dashboard-propertymgmt.app.openshiftcognizant.com/|Dashboard>"
        }
       
    } catch(err){
        currentBuild.result = "FAILURE"
        slackSend color: '#e2062b', message: "Deployment Failed!! Details:'${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) "
        throw err
    }
}
